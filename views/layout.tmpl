head
  meta(charset="UTF-8")
  meta(name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0")
  meta(content='text/html; charset=utf-8' http-equiv='Content-Type')
  meta(content='IE=edge, chrome=1' http-equiv='X-UA-Compatible')

  title Declaire.js

  link(rel="stylesheet" href="/stylesheets/main.css")
  link(href="/js/bower/fontawesome/css/font-awesome.min.css" rel="stylesheet")
  link(href="/js/bower/highlightjs/styles/github.css" rel="stylesheet")
  link(rel="shortcut icon" href="/favicon.png")

body
  header#header
    .logo
      i.fa.fa-barcode
      span Declaire
    nav
      ul
        li
          a(href="#features") Features
        li
          a(href="#install") Get Started
        li
          a(href="/pages/docs") Documentation
        //- li
        //-   a(href="https://github.com/syntheticore/declaire") Github

  main
    header
      h1 Declaire.js
      h2 A minimal, yet complete Web Application Framework
      a.cta(href="#install") Get Started
      
    article#features
      ul.features
        li
          h3 Full Stack
          p
            | Declaire.js allows you to write a single web application that runs on both
            | client and server.
          p
            | Pages are first generated in a streaming fashion on the server
            | - for short time to first byte and easy SEO - and get rehydrated on the client
            | afterwards, using the same codebase.
          p
            | Declaire brings its own templating language, with a compact, 
            a(href="http://jade-lang.com" target="_blank") Jade
            | -inspired syntax and a robust set of logic blocks for structuring your markup.
          p
            | RESTfull resources get served for your models automatically, without the need to write
            | additional code. Just define a data model, create instances and you're good to go.
          p
            | Stylesheets written in
            a(href="http://learnboost.github.io/stylus/" target="_blank") Stylus 
            | /
            a(href="http://tj.github.io/nib/" target="_blank") Nib 
            | are compiled and served automatically for you.
        
        li
          h3 Declarative
          p
            | The template is the highest authority in a Declaire application and manages most
            | application state for you.
          p
            | ViewModels get instantiated and deleted by the template engine
            | as neccessary when data changes, freeing you from having to manage memory and event
            | handlers yourself.
          p
            | Writing application code in this declarative way minimizes overhead and prevents many
            | common programming mistakes.
        
        li
          h3 Realtime Sync
          p
            | Model state is kept current with the remote database at all times automatically.
          p
            | Declaire does this in a scalable fashion, without the need for an additional PubSub
            | server like 
            a(href="http://redis.io" target="_blank") Redis
            | . A single 
            a(href="http://mongodb.org" target="_blank") MongoDB 
            | connection is sufficient for all data storage and synchronization needs.
        
        li
          h3 Auto Bindings
          p
            | Watch the DOM magically update, as your model data changes. No matter if those changes
            | resulted from your own actions or from updates to the server.
        
        li
          h3 Computed Properties
          p
            | Computed properties are like regular model methods, except that they also emit change
            | events when one of the properties they depend on changes. This allow you to hook up
            | complex logic to templates in a completely declarative way.
          p
            | Dependency tracking happens automatically, without the need to declare these
            | relationships ahead of time.
        
        li
          h3 Offline First
          p
            | All Declaire applications work offline by default.
            | Data changes are kept in local browser storage when offline and get synced back to
            | the server later, when connectivity is available again.

        li
          h3 Streaming Server
          p
            | When templates get first rendered on the server, Declaire utilises 
            a(href="http://nodejs.org" target="_blank") Node.js
            | ' streaming technology to transmit the first few bytes as soon as possible. Browsers can
            | already display content and start downloading additional resources, while the database
            | is still returning data.

        li
          h3 Scalable
          p
            | Declaire scales up from very simple pages and prototypes to complex applications.
          p
            | Because of its full-stack, zero-config nature, applications are quickly
            | set up and running.
          p
            | Because of its declarative logic, flexible components and sane module system, Declaire
            | also keeps more complex applications maintainable and fast.
          p 
            | Declaire also scales horizontally and runs on an arbitrary number of Node instances.
            | Both session and push management are realised in a scalable fashion.
        
        li
          h3 Based on trusted Technology
          p
            | Declaire runs on 
            a(href="http://nodejs.org" target="_blank") Node.js 
            | and uses 
            a(href="http://expressjs.com" target="_blank") Express 
            | internally to serve requests.
            | Data is stored in a 
            a(href="http://mongodb.org" target="_blank") MongoDB 
            | instance, and code is packaged using 
            a(href="http://browserify.org" target="_blank") Browserify
            | .
          p
            | The express app, as well as the connected database instance are exposed to interested
            | applications just before listening for requests.
            | This allows you to hook up legacy code or load additional 
            a(href="http://expressjs.com/resources/middleware.html" target="_blank") express middleware 
            | and make changes to the database before serving requests.

        li
          //- h3 Decidedly Web
          h3 ❤ ing the Web
          p
            | In the transition from server generated pages to single-page applications, some values
            | of the web have been lost in translation.
          //- p
          //-   | Pages often only contain a small fragment of
          //-   | container html and generate everything else using javascript. Some frameworks these days
          //-   | even go as far as bypassing the http protocol completely and transmit everything over websockets.
          //- p
          //-   | This is not only problematic for search engines and comparatively slow when it comes to
          //-   | time to first impression, but also undermines the movement to semantic html somewhat,
          //-   | by relying on a "semantic DOM" that only high-powered, javascript-savy browser engines
          //-   | can still consume, instead of, say, a simple shell script.
          p
            | Declaire therefore delivers:
            br
            | Full HTML instead of JS-only.
            br
            | Data over standard REST/json.
            br
            | Push updates using Server-Sent-Events over standard HTTP instead of websockets.

        // Implicit router and offline handling through scope
        // Authentication and permission system

    nav#side-bar.side-bar
      header Declaire
      ul
        li
          a(href="#install") Installation
        li
          a(href="#get-started") Getting Started
        li
          a(href="#structure") Structuring your Code
        li
          a(href="#templates") Basic Templating
          ul
            li
              a(href="#interpolation") Interpolation
            li
              a(href="#bindings") Bindings
            li
              a(href="#text") Free Text
            li
              a(href="#scope") Scope
            li
              a(href="#flow") Control Flow
              ul
                li
                  a(href="#flow-if") if
                li
                  a(href="#flow-for") for
                li
                  a(href="#flow-view") view
                li
                  a(href="#flow-action") action
        li
          a(href="#data-models") Data Models
          ul
            li
              a(href="#events") Events
            li
              a(href="#computed-properties") Computed Properties
            li
              a(href="#realtime") Realtime Updates
            li
              a(href="#loading") Loading Models
            li
              a(href="#model-offline") Offline Handling
        li
          a(href="#view-models") View Models
        li
          a(href="#collections") Collections
        li
          a(href="#queries") Queries
        li
          a(href="#main-model") The Main Model
        li
          a(href="#components") Components
        li
          a(href="#routing") Routing
        li
          a(href="#client-only") Client-only code
        li
          a(href="#offline") Offline Support
        li
          a(href="#stylesheets") Stylesheets
        li
          a(href="#deployments") Deployments
          ul
            li
              a(href="#mongodb") MongoDB
            li
              a(href="#heroku") Heroku
        li
          a(href="#tools") Tools
          ul
            li
              a(href="#yeoman") Yeoman
            li
              a(href="#nodemon") Using Nodemon

    section#main-content

      article#install
        h2 Install Declaire
        p
          | Install Declaire into any node application using 
          a(href="http://npmjs.com") npm
          | .
        pre(data-filename="Shell")
          code(class="javascript")
            | $ cd my-app
            | $ npm install declaire --save

      article#get-started
        h2 Get Started
        p
          | To build a simple todos application, create an application file, load declaire, define your models and
          | supply the start method with the address of your development database.
        pre(data-filename="app.js")
          code(class="javascript")
            | var declaire = require('declaire');
            |
            | var Todo = declaire.Model('todos', {
            |   title: 'Untitled Todo',
            |   done: false
            | });
            |
            | declaire.ViewModel('TodosView', {
            |   todos: declaire.Collection(Todo),
            | 
            |   newTodo: function(input) {
            |     this.get('todos').create({title: input.val()});
            |     input.val('');
            |   }
            | });
            |
            | declaire.start({
            |   mongoDevUrl: 'mongodb://127.0.0.1:27017/my-app'
            | });
        p
          | Create your main layout template in the views folder.
          | Declaire will wrap it with an html tag automatically if you omit it.
        pre(data-filename="views/layout.tmpl")
          code(class="handlebars")
            | head
            |   title Todos
            |   link(href="/stylesheets/main.css" rel="stylesheet")
            | body
            |   {{view TodosView}}
            |     header
            |       h1 Todos
            |     main
            |       input(type="text" placeholder="What's next?" {{action change newTodo}})
            |       ul.todos
            |         {{for todos}}
            |           li
            |             input(type="checkbox" checked="{{done}}")
            |             h2 {title}
            |     footer {todos.length} items left to do
        p
          | Finally, run your application using
        pre(data-filename="Shell")
          code(class="javascript")
            | $ node app.js

      article#structure
        h2 Structuring your Code
        p
          | Node.js uses the CommonJS standard for the definition and import of modules.
          | Your Declaire app will use it too, because it must be able to run on
          | the server as well. Declaire will package your code using
          a(href="http://browserify.org" target="_blank") Browserify 
          | for usage in the browser.
        p To include another module, just do as you're used to.
        pre(data-filename="app.js")
          code(class="javascript")
            | var myModule = require('./src/myModule.js');
        p 
          | Your directory structure should look like follows by default.
          br
          | See the
          a(href="#yeoman") tools section 
          | to learn how you can generate this very quickly.
        pre(data-filename="fs")
          code(class="javascript")
            | /app
            |   .gitignore
            |   /public
            |     favicon.png
            |   /src
            |   /stylesheets
            |   /views
            |   app.js
            |   package.json
            |   // nodemon.json - optional, but <a href="#nodemon">read this</a> if you want to use it

        p The public folder should contain your static assets and will get served automatically.

      article#templates
        h2 Basic Templating
        p
          | Declaire's templating language borrows heavily from 
          a(href="http://jade-lang.com" target="_blank") Jade
          | , but differs in notable ways.
          br
          | Hierachy is denoted through indentation, while most other syntax choices try to adhere
          | as much as possible to the CSS syntax. A fully defined tag might look like this:
        pre(data-filename="views/layout.tmpl")
          code(class="handlebars")
            | .pane
            |   input#my-id.foo.bar(type="text" checked)
        p
          | We used the '#' character to give the input an id, applied several classes using '.' and
          | set some attributes using the regular html notation.
          br
          | When an id or class is used, divs may have the tagname omited, as divs are the default.

        section#interpolation
          h3 Interpolation
          p
            | Any value available in the surrounding scope can be interpolated at any practical point
            | in a template using a pair of curlies. This also works for attributes.
          pre(data-filename="views/layout.tmpl")
            code(class="handlebars")
              | .todo
              |   h2 {title}
              |   input(type="checkbox" checked="{done}")
          p
            | By default, text gets escaped before being inserted into the page, to prevent injection attacks.
            | If you precede the curlies with an exclamation mark though, you can insert unescaped text.
            | Use this at your own risk!
          pre(data-filename="views/layout.tmpl")
            code(class="handlebars")
              | h2 !{title}
        
        section#bindings
          h3 Bindings
          p
            | Using double curlies in an attribute will create a two-way binding, meaning that the
            | input will drive the connected model property when the user makes changes.
          pre(data-filename="views/layout.tmpl")
            code(class="handlebars")
              | input(type="checkbox" checked="{{done}}")
        
        section#text
          h3 Free flowing text
          p
            | When your text doesn't fit on a single line anymore, you can end a tag definition with a dot
            | and indent the following lines below. Text may also contain regular html tags.
          pre(data-filename="views/layout.tmpl")
            code(class="handlebars")
              | p.
              |   Lorem ipsum dolor sit amet
              |   Lorem ipsum &lt;b&gt;dolor&lt;/b&gt; sit amet
          p
            | Alternatively, you may insert text anywhere you would insert a regular tag, by preceding it
            | with the '|' character. This allows you to still insert intermediate tags using the regular
            | syntax. 
          pre(data-filename="views/layout.tmpl")
            code(class="handlebars")
              | p
              |   | Lorem ipsum
              |   a(href="#") dolor 
              |   | sit amet

        section#scope
          h3 Scope
          p
            | The scope controls what data is visible at any point in a template.
            br
            | When you use a path in a template, when interpolating or inside statements, that path is
            | looked up upward in the scope. When a path hits a property or computed property of a model or view model
            | in the scope, it returns its value.
          p
            | The scope at least contains the 
            a(href="#main-model") main model
            | , which Declaire inserts automatically.
            | New names get introduced into the scope by control statements like
            a(href="#flow-for") for 
            | or 
            a(href="#flow-view") view
            | .

        section#flow
          h3 Control Flow
          p
            | Several statements are available in templates to control the generated markup in response
            | to changes to its underlying data, accessible through their respective keywords in double curlies.
          section#flow-if
            h4 if
            p
              | The if statement is different from Javascript and does not execute arbitrary code.
              | Only paths to model or view model properties within the scope, as well as basic literals
              | are allowed, together with a fixed set of comparison operators. Inversion works too.
            pre(data-filename="views/layout.tmpl")
              code(class="handlebars")
                | {{if person.name == 'Peter'}}
                |   strong Congratulations Peter!
                |   {{if person.age < 18}}
                |     .advice Shut your eyes!
                |
                | {{if !_online}}
                |   dialog Waiting for connection ...
          section#flow-for
            h4 for
            p
              | Use the for-statement to iterate through collections and arrays and produce output for
              | every item.
            pre(data-filename="views/layout.tmpl")
              code(class="handlebars")
                | ul
                |   {{for todo in todos}}
                |     li {todo.title}
            p
              | You can also use the short form, which will insert each item directly into the scope,
              | making its properties visible from that point downward in the template.
              | Note that its properties may shadow properties or variables of the same name, higher in
              | the scope. These can then no longer be reached.
            pre(data-filename="views/layout.tmpl")
              code(class="handlebars")
                | ul
                |   {{for todos}}
                |     li {title}
          section#flow-view
            h4 view
            p
              | Views instantiate view models when they are encoutered in a template and and put these
              | into the scope. Their properties and methods are subsequently available in the scope.
            p
              | Once a view is no longer needed, perhaps because its item was removed from a collection,
              | or because a parent element got updated, Declaire will remove the associated model object
              | automatically, firing the usual trail of events.
            pre(data-filename="views/layout.tmpl")
              code(class="handlebars")
                | {{if showSomeView}}
                |   {{view MyViewModel as myModel}}
                |     h1 {myModel.title}

          section#flow-action
            h4 action
            p
              | When the user generates events by interacting with the page, your application can react
              | using the action statement. It takes the name of an event and a method to call as arguments.
            p The method will get passed the originating DOM element as a parameter.
            pre(data-filename="views/layout.tmpl")
              code(class="handlebars")
                | {{view MyView}}
                |   input(type="text" {{action keyup method}})
            pre(data-filename="app.js")
              code(class="javascript")
                | declaire.ViewModel('MyView', {
                |   method: function(input) {
                |     console.log(input.val());
                |   }
                | });

      article#data-models
        h2 Data Models
        p
          | Data models structure your application data and code, shield you from the database, provide offline
          | capabilities and report updates to their data to interrested listeners using events.
        p
          | A model definition consists of a collection name, defaults for your attributes and methods to operate on that data.
          | Supply the collection name as the first parameter. In this example, JSON data for your todos
          | will be available under the url /api/todos.
        p
          | Note that model properties get accessed using getter and setter functions and never directly.
        pre(data-filename="app.js")
          code(class="javascript")
            | var Todo = declaire.Model('todos', {
            |   title: 'Untitled Todo',
            |   done: false,
            |
            |   check: function() {
            |     this.set('done', true);
            |   }
            | });
        p
          | Individual models can now be created from that definition using the create method.
          | You can also pass a hash of values to the constructor to set some properties directly on creation.
          br
          | Once created, the object is visible to your application and fully functional, but is not
          | persisted to the server yet. To make it visible to other users of the app as well,
          | we need to save it to the database using the appropriately named method.
        pre(data-filename="app.js")
          code(class="javascript")
            | var todo = Todo.create({title: 'Foo'});
            | todo.check();
            | todo.save();
        p As a convenience, setting properties and saving immediately can be done in a single method call.
        pre(data-filename="app.js")
          code(class="javascript")
            | todo.save({done: true});
        
        section#events
          h3 Events
          p
            | In many cases, the event system is invisible to you and is used by the template engine
            | automatically to update the DOM when data in your models changes.
            | You can also access it yourself however, using a handful of methods:
          pre(data-filename="app.js")
            code(class="javascript")
              | todo.on('change', function() {
              |   console.log("Some property changed");
              | });
              |
              | todo.on('change:title', function() {
              |   console.log("The title changed to " + todo.get('title'));
              | });
              |
              | todo.once('change', function() {
              |   console.log("This will get called only on the next change");
              | });
          p The on method returns the handler itself, so that it can be unregistered again later:
          pre(data-filename="app.js")
            code(class="javascript")
              | var handler = todo.on('change', function() {});
              | todo.off(handler);
          //- p What events are emited?
        
        section#computed-properties
          h3 Computed Properties
          p
            | Regular model methods implicitly become Computed properties simply by accessing them
            | from a template or through the get() method.
          p
            | They will then trigger change events, just like normal properties, when one of their
            | dependencies changes. These dependencies are tracked automatically upon the first
            | call to get() and will subsequently get updated on every access.
          pre(data-filename="app.js")
            code(class="javascript")
              | var Person = declaire.Model('people', {
              |   firstName: '',
              |   lastName: '',
              |
              |   name: function() {
              |     return this.get('firstName') + ' ' + this.get('lastName');
              |   }
              | });
          pre(data-filename="views/ContactView.tmpl")
            code(class="handlebars")
              | h1 {name}

        section#realtime
          h3 Realtime Updates
          p
            | When data that you have loaded in your application changes in the database, your models
            | will get updated automatically in realtime. In additional to emiting the regular change event
            | for every property that got changed, the model will also fire a fetch event.

        section#loading
          h3 Loading Models
          p
            | 

        section#model-offline
          h3 Offline Handling
          p
            | 

      article#view-models
        h2 View Models
        p
          | View models inherit from declaire.Model, but fulfill a different purpose.
          br
          | They are the building blocks of your UI logic, cannot be saved and export a name by which they can
          | be accessed from within templates.
        p
          | Normally, a view model will want to fetch data on instantiation to make it available to templates.
          | Note that, as opposed to normal models, you will generally not want to instantiate and delete these
          | yourself, as this job is done by the template engine automatically.
        pre(data-filename="app.js")
          code(class="javascript")
            | var i = 1;
            | declaire.ViewModel('MyView', {
            |   title: ''
            | }, function(this) {
            |   this.set('title', 'View ' + i++);
            |   this.on('remove', function() {
            |     console.log(this.get('title') + " is leaving the ship...");
            |   });
            | });

      article#collections
        h2 Collections
        p

      article#queries
        h2 Queries
        p
          | Queries are a specific type of collection that filters its content according to a
          | given database query object. Once created, a query remains active, meaning that
          | matching objects that get added to the database after a query was created will
          | show up after the fact and trigger the appropriate events.
        p
          | Queries can be further narrowed down by calling the chainable filter function:
        pre(data-filename="app.js")
          code(class="javascript")
            | var finishedTodos = declaire.Query(Todo, {done: true});
            | var aboutSport = finishedTodos.filter({title: {$contains: 'sport'}});
            | aboutSport.each(function(todo) {
            |   todo.remove();
            | });
        p We can use a query on the shoulders of a computed property for creating a live search feature:
        pre(data-filename="app.js")
          code(class="javascript")
            | declaire.ViewModel('SearchUsersView', {
            |   people: declaire.Query(Person),
            |   query: '',
            |   results: function() {
            |     // Use computed properties inside filters transparently like a boss
            |     return this.get('people').filter({name: {$contains: this.get('query')}});
            |   }
            | });
        pre(data-filename="views/searchUsers.tmpl")
          code(class="handlebars")
            |   {{view SearchUsersView}}
            |     input(type="text" placeholder="Search for people" value="{{query}}")
            |     ul.results
            |       {{for results}}
            |         li
            |           h1 {firstName}, we found you!
        p
          | Here, the query property of the view model gets driven by its binding to the text input.
          | When the user inserts a character, query gets updated, fires a change event which causes
          | results to fire one as well, which causes the template engine to update the list of
          | search results.
        p Look ma! No ajax! No event handlers!

        section
          h3 Local Queries
          p
            | When a query is evaluated, it is performed against the local model cache first, returning
            | results almost immediately. When the user is online, a live query to the database is
            | then performed in the background, to fetch additional matching objects from the server.
            br
            | When these arrive, a regular update event, as well as fetch event, will be emited by
            | the query, causing bound views to update again.

      article#main-model
        h2 The Main Model
        p
          | The main model sits at the very bottom of every scope and gets created and updated
          | by the framework. It is not meant to be written to and should only be read from.
        p
          | It contains several properties of interest to
          a(href="#routing") routing
          | ,
          a(href="#offline") offline handling 
          | and
          a(href="#components") components
          | .
        section
          h3 _page
          p Contains the current page URL
          h3 _params
          p Contains the parameters given to the import statement. Useful to delegate these to a view model.
          //- h3 _content
          //- p Contains markup nested below an import statement. Useful to customize reusable components.
          h3 _online
          p
            | Represents the current state of connectivity. Useful to show to user when his changes do
            | not currently reach the server.
          h3 _authenticated
          p Tells if the user is logged in.
          h3 _version
          p 
            | Changes as soon as a new version of the application is available and has been loaded
            | into the offline cache. This is a good time to inform the user that reloading the page
            | will bring new goodness.

      article#components
        h2 Organizing Templates and Components
        p
          | Declair uses a simple way to combine templates that also serves as a basis to build
          | reusable components:
          | Use the import instruction to import another template in the surrounding template.
        p
          | We can use this to refactor our todos app from above and
          | make the TodosView a reusable component that we can insert at multiple locations.
          br
          | Parameters passed to the imported template are delegated to the topmost node inside.
        pre(data-filename="views/TodosView.tmpl")
          code(class="handlebars")
            | {{view TodosView}}
            |   header
            |     h1 Todos
            |   main
            |     input(type="text" placeholder="What's next?" {{action change newTodo}})
            |     ul.todos
            |       {{for todos}}
            |         li
            |           input(type="checkbox" checked="{{done}}")
            |           h2 {title}
            |   footer {todos.length} items left to do
            //- |   .embed
            //- |     {_content}
        pre(data-filename="views/layout.tmpl")
          code(class="handlebars")
            | head
            |   title Todos
            |   link(href="/stylesheets/main.css" rel="stylesheet")
            | body
            |   {{import TodosView}}
            |   span And another one
            |   {{import TodosView}}
            //- |     h1 This is inserted content

      article#routing
        h2 Routing
        p
          | Declaire apps contain an implicit router, that sets several properties of the main
          | model automatically. This way, routing information is not only available to javascript,
          | but - because the main model lies at the base of every scope - to templates as well.
        p
          | Because the main model is a regular model object, it will emit change events when its
          | properties are written to, which are in turn caught by the template engine.
        pre(data-filename="views/layout.tmpl")
          code(class="handlebars")
            | body
            |   header
            |     h1 My Page
            |     nav>ul
            |       li>a(href="/") Home
            |       li>a(href="/pages/todos") Todos
            |   main
            |     {{if _page == '/'}}
            |       {{import IndexView}}
            |     {{if _page == '/pages/todos'}}
            |       {{import TodosView(_params)}}

      article#client-only
        h2 Running client- (or server-) only code
        p
          | By default, all your code is executed on both server and client, leading to consistent results.
          | Sometimes though, this will not do the trick and you might want to execute code only on the one side
          | or the other. Declaire offers several ways to do this:
        p
          | Declaire accepts several hooks in its start method, that get executed at specific points
          | in time. Some on the server, some on the client. Consult the
          a(href="/pages/docs") docs 
          | for more detailed information!
        pre(data-filename="app.js")
          code(class="javascript")
            | console.log("Executed once on both client and server");
            |
            | declaire.start({
            |   beforeConnect: function(express, mongoDB) {
            |     console.log("Executed only on the server");
            |   },
            |
            |   onLoad: function(mainModel) {
            |     console.log("Executed only on the client");
            |   }
            | });
        p
          | Declaire also provides helper methods to exclude arbitrary code segments, that can
          | be used both with a callback, or as a regular function:
        pre(data-filename="app.js")
          code(class="javascript")
            | // Continuation passing style
            | declaire.onServer(function() { });
            |
            | // Good ol' boolean function
            | if(declaire.onClient()) { }

      article#offline
        h2 Offline Support
        p
          | After the initial page load, Declaire apps can be reloaded - even accross browser
          | restarts - when the device has no connection to the internet, by the virtue of a
          | framework generated offline manifest that is injected into your pages.
          br
          | Even when you are online, this will give your applications a serious boost on
          | subsequent loads. 
        p
          | Declaire also keeps a cache of checked out data models and can
          | silently retrieve any objects that had been loaded already from local storage,
          | without modifications to your code.
        p
          | Modifications to existing objects or newly created ones will be saved
          | locally until the server can be reached for synchronization again.
        p
          | All of this happens completely transparently to you. When your app needs to know
          | more about its internal state though, the 
          a(href="#main-model") main model 
          | contains several fields of interest.

      article#stylesheets
        h2 Stylesheets
        p
          | You can use anything you want of course, but by default, Declaire supports
          a(href="http://learnboost.github.io/stylus/") Stylus 
          | with 
          a(href="http://tj.github.io/nib/") Nib 
          | for writing your stylesheets.
          | These are great libraries and the indented syntax matches Declaire nicely.
          | Among lots of other functionality, they provide you with:
        pre(data-filename="stylesheets/main.styl")
          code(class="less")
            | // Server side imports
            | @require 'nib'
            |
            | // Cross-browser reset
            | global-reset()
            |
            | // Variables
            | $mainColor = #0aaaad
            |
            | // Apply vendor-prefixes automatically for unstandardized CSS
            | body
            |   background: linear-gradient(top, white, black)
            |
            | // Nested definitions
            | article
            |   margin: 3rem 0
            |   h2
            |     font-weight: bold
            |
            | // Color calculations, etc
            | a
            |   color: $mainColor * 0.9
            |   &:hover
            |     color: $mainColor
        p
          | Simply put your stylus files into the stylesheets folder of your application
          | and they will be served under the identical path, just with the .css extension.
        pre(data-filename="views/layout.tmpl")
          code(class="handlebars")
            | head
            |   link(href="/stylesheets/main.css" rel="stylesheet")

      article#deployments
        h2 Deployments
        p
          | Declaire works as a standard 
          a(href="http://npmjs.com") NPM 
          | library and doesn't use any special protocols beside HTTP. You should therefore
          | be able to deploy your application anywhere where node applications run.
        p
          | Be sure to set the environment variable NODE_ENV to 'production' on production
          | systems, to disable development guides like automatic reparsing of templates.
          br
          | This will also minify your assets and apply some other optimizations.
        section#mongodb
          h3 MongoDB
          p
            | Declaire will take connection information from the environment variables MONGOHQ_URL
            | and MONGOLAB_URI, unless you override this with the call to declaire.start().
            br
            | Because these variables are set by PaaS services like 
            a(href="http://heroku.com" target="_blank") Heroku
            | , this allows Declaire apps to connect to these popular services automagically.
          pre(data-filename="app.js")
            code(class="javascript")
              | declaire.start({
              |   mongoUrl: 'mongodb://my-host:27017/my-app'
              | });
        section#heroku
          h3 Heroku
          p
            | Follow these simple steps to wrap your app in a
            a(href="http://git-scm.com" target="_blank") Git 
            | repository and deploy it to
            a(href="http://heroku.com" target="_blank") Heroku
            | :
          pre(data-filename="Shell")
            code(class="javascript")
              | // Go to your app folder
              | $ cd my-app
              | // Initialize a git repository there
              | $ git init
              | // Make sure Git doesn't check in generated files
              | $ echo $'node_modules\npublic' > .gitignore
              | // Add everything else to the repo and commit
              | $ git add .
              | $ git commit -m "Initial commit"
              | // Create and configure an application on Heroku
              | $ heroku create my-app
              | $ heroku config:set NODE_ENV=production
              | // Add a database
              | $ heroku addons:add mongolab
              | // Deploy
              | $ git push heroku master
              | // Enjoy!
              | $ heroku open

      article#tools
        h2 Tools
        p
          | Use these additional resources to speed up your workflow.
        section#yeoman
          h3 Yeoman
          p
        section#nodemon
          h3 Using Nodemon
          p
            | Declaire needs to touch the filesystem when bundeling your code, which causes
            a(href="http://nodemon.io" target="_blank") Nodemon 
            | to reload your application. Adding '_declaire_client.js' to your
            | nodemon configuration will make it behave correctly.
          pre(data-filename="nodemon.json")
            code(class="json")
              | {
              |   "ignore": ["fixtures/*", "public/*", "_declaire_client.js"]
              | }


  footer#footer
    ul.blocks
      li
        h4 Declaire
        ul.items
          li
            a(href="/") Home
          li
            a(href="https://www.npmjs.com/package/declaire") NPM
          li
            a(href="/pages/blog") Blog
      li
        h4 Help
        ul.items
          li
            a(href="#install") Get started
          li
            a(href="/pages/examples") Examples
          li
            a(href="/pages/docs") Documentation
      li
        h4 About
        ul.items
          li
            a(href="/pages/license") License
          li
            a(href="/pages/imprint") Imprint
      li
        h4 Connect
        ul.items
          li
            a(href="https://github.com/syntheticore/declaire")
              i.fa.fa-github
              | Github
          //- li
          //-   a(href="#")
          //-     i.fa.fa-facebook-square
          //-     | Facebook
          //- li
          //-   a(href="#")
          //-     i.fa.fa-twitter
          //-     | Twitter
    .bottom
      i.fa.fa-barcode
      span
        | Declaire was built with ❤ by
        a(href="https://github.com/syntheticore") Björn Breitgoff 
        | in Aachen, Germany

  script(src="/js/bower/jquery/dist/jquery.min.js")
  script(src="/js/bower/underscore/underscore-min.js")
  script(src="/js/bower/backbone/backbone.js")
  script(src="/js/bower/highlightjs/highlight.pack.js")
  script
    | hljs.initHighlightingOnLoad();
  //- script(src="/bundle.js")
