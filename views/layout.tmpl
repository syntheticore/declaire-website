head
  meta(charset="UTF-8")
  meta(name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0")
  meta(content='text/html; charset=utf-8' http-equiv='Content-Type')
  meta(content='IE=edge, chrome=1' http-equiv='X-UA-Compatible')

  title Declaire.js

  link(rel="stylesheet" href="/stylesheets/main.css")
  link(href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet')
  link(href="/js/bower/fontawesome/css/font-awesome.min.css" rel="stylesheet")
  link(rel="shortcut icon" href="/favicon.png")

body
  header#header
    .logo
      i.fa.fa-barcode
      span Declaire
    nav
      ul
        li
          a(href="#features") Features
        li
          a(href="#get-started") Get Started
        li
          a(href="/pages/docs") Documentation
        //- li
        //-   a(href="https://github.com/syntheticore/declaire") Github

  main
    header
      h1 Declaire.js
      h2 A minimal, yet complete Web Application Framework
      a.cta(href="#get-started") Get Started
      
    article#features
      ul.features
        li
          h3 Minimal, yet a complete Package
          p
            | Declaire.js allows you to write a single web application that runs on both
            | client and server.
          p
            | Pages are first generated in a streaming fashion on the server
            | - for short time to first byte and easy SEO - and get rehydrated on the client
            | afterwards, using the same codebase.
          p
            | Declaire brings its own templating language, with a compact, Jade-inspired syntax
            | and a robust set of logic blocks for structuring your markup.
          p
            | RESTfull resources get served for your models automatically, without the need to write
            | additional code. Just define a data model, create instances and you're good to go.
          p
            | Stylesheets written in Stylus/nib are compiled and served automatically for you.
        
        li
          h3 Declarative
          p
            | The template is the highest authority in a Declaire application and manages most
            | application state for you.
          p
            | ViewModels get instantiated and deleted by the template engine
            | as neccessary when data changes, freeing you from having to manage memory and event
            | handlers yourself.
          p
            | Writing application code in this declarative way minimizes overhead and prevents many
            | common programming mistakes.
        
        li
          h3 Realtime Sync
          p
            | Model state is kept current with the remote database at all times automatically.
          p
            | Declaire does this in a scalable fashion, without the need for an additional PubSub
            | server like Redis. A single MongoDB connection is sufficient for all data storage
            | and synchronization needs.
        
        li
          h3 Auto Bindings
          p
            | Watch the DOM magically update, as your model data changes. No matter if those changes
            | resulted from your own actions or from updates to the server.
        
        li
          h3 Computed Properties
          p
            | Computed properties are like regular model methods, except that they also emit change
            | events when one of the properties they depend on changes. This allow you to hook up
            | complex logic to templates in a completely declarative way.
          p
            | Dependency tracking happens automatically, without the need to declare these
            | relationships ahead of time.
        
        li
          h3 Offline First
          p
            | All Declaire applications work offline by default.
            | Data changes are kept in local browser storage when offline and get synced back to
            | the server later, when connectivity is available again.

        li
          h3 Streaming Server
          p
            | When templates get first rendered on the server, Declaire utilises Node.js' streaming technology
            | to transmit the first few bytes as soon as possible. Browsers can already display content
            | and start downloading additional resources, while the database is still returning data.
        
        li
          h3 Based on trusted Technology
          p
            | Declaire runs on Node.js and uses Express internally to serve requests.
            | Data is stored in a MongoDB instance, and code is packaged using Browserify.
          p
            | The express app, as well as the connected database instance are exposed to interested
            | applications just before listening for requests.
            | This allows you to hook up legacy code or load additional express middleware and make
            | changes to the database before serving requests.

        li
          //- h3 Decidedly Web
          h3 ❤ ing the Web
          p
            | In the transition from server generated pages to single page applications, some values
            | of the web have been lost in translation.
          //- p
          //-   | Pages often only contain a small fragment of
          //-   | container html and generate everything else using javascript. Some frameworks these days
          //-   | even go as far as bypassing the http protocol completely and transmit everything over websockets.
          //- p
          //-   | This is not only problematic for search engines and comparatively slow when it comes to
          //-   | time to first impression, but also undermines the movement to semantic html somewhat,
          //-   | by relying on a "semantic DOM" that only high-powered, javascript-savy browser engines
          //-   | can still consume, instead of, say, a simple shell script.
          p
            | Declaire therefore delivers:
            br
            | Full HTML instead of JS-only.
            br
            | Data over standard REST/json.
            br
            | Push updates using Server-Sent-Events over standard HTTP instead of websockets.

        // Implicit router and offline handling through scope
        // Authentication and permission system

    article#get-started
      h2 Get Started
      p
        | Start creating a simple todos app by creating a package.json and installing declaire.
      pre(data-filename="Shell")
        | $ mkdir my-app; cd my-app
        | $ npm init
        | $ npm install declaire --save
      p
        | Next, create an application file, load declaire, define your models and
        | supply the start method with the address of your development database.
      pre(data-filename="app.js")
        | var declaire = require('declaire');
        |
        | var Todo = declaire.Model('todos', {
        |   title: 'Untitled Todo',
        |   done: false
        | });
        |
        | declaire.ViewModel('TodosView', {
        |   todos: declaire.Collection(Todo),
        | 
        |   newTodo: function(input) {
        |     this.get('todos').create({title: input.val()});
        |     input.val('');
        |   }
        | });
        |
        | declaire.start({
        |   mongoDevUrl: 'mongodb://127.0.0.1:27017/my-app'
        | });
      p
        | Create your main layout template in the views folder.
        | Declaire will wrap it with an html tag automatically if you omit it.
      pre(data-filename="views/layout.tmpl")
        | head
        |   title Todos
        |   link(href="/stylesheets/main.css" rel="stylesheet")
        | body
        |   {{view TodosView}}
        |     header
        |       h1 Todos
        |     main
        |       input(type="text" placeholder="What's next?" {{action change newTodo}})
        |       ul.todos
        |         {{for todos}}
        |           li
        |             input(type="checkbox" checked="{done}")
        |             h2 {title}
        |     footer {todos.length} items left to do
      p
        | Finally, run your application using
      pre(data-filename="Shell")
        | $ node app.js

  footer#footer
    ul.blocks
      li
        h4 Declaire
        ul.items
          li
            a(href="/") Home
          li
            a(href="/pages/blog") Blog
      li
        h4 Help
        ul.items
          li
            a(href="#get-started") Get started
          li
            a(href="/pages/examples") Examples
          li
            a(href="/pages/docs") Documentation
      li
        h4 About
        ul.items
          li
            a(href="mailto:syntheticore@gmail.com") Contact
          li
            a(href="/pages/imprint") Imprint
      li
        h4 Connect
        ul.items
          li
            a(href="https://github.com/syntheticore/declaire")
              i.fa.fa-github
              | Github
          li
            a(href="#")
              i.fa.fa-facebook-square
              | Facebook
          li
            a(href="#")
              i.fa.fa-twitter
              | Twitter
    .bottom
      i.fa.fa-barcode
      span
        | Declaire was built with ❤ by
        a(href="https://github.com/syntheticore") Björn Breitgoff 
        | in Aachen, Germany

  script(src="/js/bower/jquery/dist/jquery.min.js")
  script(src="/js/bower/underscore/underscore-min.js")
  script(src="/js/bower/backbone/backbone.js")
  script(src="/bundle.js")
